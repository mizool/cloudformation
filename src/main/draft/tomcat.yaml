AWSTemplateFormatVersion: 2010-09-09
Description: Draft template for a Java Web Application running in an autoscaling group of Tomcat instances. Extend and
  adapt configuration as needed.

Parameters:
  networkStackName:
    Description: The name of an existing network stack in which a Cassandra cluster will be created.
    Type: String
    MinLength: 1

  cassandraStackName:
    Description: The name of an existing Cassandra stack that the application will get access to.
    Type: String
    MinLength: 1

  publicLoadBalancerStackName:
    Description: The name of an existing public load balancer stack that the application will add a listener to, and
      register its target group on it.
    Type: String
    MinLength: 1

  redisStackName:
    Description: The name of an existing Redis stack that the application will use as a JCache back end.
    Type: String
    MinLength: 1

  deployableBucketName:
    Description: The name of the bucket that contains the deployable of the application.
    Type: String
    MinLength: 1

  deployableFileKey:
    Description: The file key inside the bucket of the deployable of the application.
    Type: String
    MinLength: 1

  applicationContextPath:
    Description: The context path to use for the application.
    Type: String
    MinLength: 1

  papertrailHost:
    Description: The host name of the papertrail log destination to use by the application.
    Type: String
    MinLength: 1

  papertrailPort:
    Description: The port of the papertrail log destination to use by the application.
    Type: Number
    MinValue: 1
    MaxValue: 65535

  instanceType:
    Description: The instance type used for the Tomcat machines.
    Type: String
    MinLength: 1
    Default: t2.small

  keyName:
    Description: The Key Manager key to be added to the list of allowed keys.
    Type: AWS::EC2::KeyPair::KeyName

  authorizedKeys:
    Description: A URL pointing to a list of authorized SSH keys to be appended as-is to ~/.ssh/authorized_keys.
    Type: String
    MinLength: 1

Mappings:
  Regions:
    eu-central-1:
      AmazonLinux2Ami: ami-0f3a43fbf2d3899f7
    eu-west-1:
      AmazonLinux2Ami: ami-01f14919ba412de34

  Scripts:
    Tomcat:
      InstallTomcat: |
        #!/bin/bash -xe
        wget -q -O - "https://repo1.maven.org/maven2/org/apache/tomcat/tomcat/9.0.8/tomcat-9.0.8.tar.gz" | tar xvzf - -C /opt
        mv /opt/apache-tomcat-9.0.8 /opt/tomcat
        mv /opt/tomcat/conf /etc/tomcat
        ln -s /etc/tomcat /opt/tomcat/conf
        mv /opt/tomcat/logs /var/log/tomcat
        ln -s /var/log/tomcat /opt/tomcat/logs
        hostname ${NAME}-$(curl http://169.254.169.254/latest/meta-data/instance-id)

      InstallLogback: |
        #!/bin/bash -xe
        wget -O /opt/tomcat/lib/slf4j-api-1.7.19.jar "https://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.19/slf4j-api-1.7.19.jar"
        wget -O /opt/tomcat/lib/jul-to-slf4j-1.7.19.jar "https://repo1.maven.org/maven2/org/slf4j/jul-to-slf4j/1.7.19/jul-to-slf4j-1.7.19.jar"
        wget -O /opt/tomcat/lib/logback-core-1.1.6.jar "https://repo1.maven.org/maven2/ch/qos/logback/logback-core/1.1.6/logback-core-1.1.6.jar"
        wget -O /opt/tomcat/lib/logback-access-1.1.6.jar "https://repo1.maven.org/maven2/ch/qos/logback/logback-access/1.1.6/logback-access-1.1.6.jar"
        wget -O /opt/tomcat/lib/logback-classic-1.1.6.jar "https://repo1.maven.org/maven2/ch/qos/logback/logback-classic/1.1.6/logback-classic-1.1.6.jar"
        wget -O /opt/tomcat/lib/logback-syslog4j-1.0.0.jar "https://repo1.maven.org/maven2/com/papertrailapp/logback-syslog4j/1.0.0/logback-syslog4j-1.0.0.jar"
        wget -O /opt/tomcat/lib/syslog4j-0.9.46.jar "http://clojars.org/repo/org/syslog4j/syslog4j/0.9.46/syslog4j-0.9.46.jar"

Resources:
  securityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName} Security Group
      GroupDescription: !Sub ${AWS::StackName} Security Group
      VpcId:
        Fn::ImportValue:
          !Sub "${networkStackName}-vpc"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Security Group

  bastion22Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref securityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        Fn::ImportValue:
          !Sub "${networkStackName}-bastion-security-group"

  cassandra9042Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::ImportValue:
          !Sub "${cassandraStackName}-security-group"
      IpProtocol: tcp
      FromPort: 9042
      ToPort: 9042
      SourceSecurityGroupId: !Ref securityGroup

  cassandra9160Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::ImportValue:
          !Sub "${cassandraStackName}-security-group"
      IpProtocol: tcp
      FromPort: 9160
      ToPort: 9160
      SourceSecurityGroupId: !Ref securityGroup

  redis6379Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::ImportValue:
          !Sub "${redisStackName}-security-group"
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      SourceSecurityGroupId: !Ref securityGroup

  deployableBucketReadRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "DeployableBucketReadPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Join
                    - ""
                    - - "arn:aws:s3:::"
                      - !Ref deployableBucketName
                      - "/*"
                  - !Join
                    - ""
                    - - "arn:aws:s3:::"
                      - !Ref deployableBucketName

  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref deployableBucketReadRole

  targetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Sub "/${applicationContextPath}/api/healthcheck"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Sub "${networkStackName}-vpc"

  listenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref targetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - !Sub "/${applicationContextPath}/*"
      ListenerArn:
        Fn::ImportValue:
          !Sub "${publicLoadBalancerStackName}-public-lb-listener"
      Priority: 10000

  launchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: False
      ImageId: !FindInMap
        - Regions
        - !Ref AWS::Region
        - AmazonLinux2Ami
      IamInstanceProfile: !Ref instanceProfile
      InstanceType: !Ref instanceType
      KeyName: !Ref keyName
      SecurityGroups:
        - !Ref securityGroup
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash -x
           yum update -y
           /opt/aws/bin/cfn-init -v --configsets setup --stack ${AWS::StackName} --resource launchConfiguration --region ${AWS::Region}
           /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource autoScalingGroup --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - "ssh_keys"
            - "ntp"
            - "haveged"
            - "openjdk8"
            - "install_tomcat"
            - "install_logback"
            - "configure_tomcat"
            - "deploy_application"
            - "run_tomcat"
        ssh_keys:
          files:
            /home/ec2-user/.ssh/additional_keys:
              source: !Ref authorizedKeys
              owner: root
              group: root
              mode: "000644"
          commands:
            register_additional_keys:
              command: "cat /home/ec2-user/.ssh/additional_keys >> /home/ec2-user/.ssh/authorized_keys"
        ntp:
          packages:
            yum:
              ntp: []
          services:
            sysvinit:
              ntpd:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                    - ntp
        haveged:
          packages:
            rpm:
              haveged: "http://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/h/haveged-1.9.1-1.el7.x86_64.rpm"
          services:
            sysvinit:
              haveged:
                enabled: true
                ensureRunning: true
        openjdk8:
          packages:
            yum:
              java-1.8.0-openjdk: ["1.8.0.222.b10-0.amzn2.0.1"]
              java-1.8.0-openjdk-devel: ["1.8.0.222.b10-0.amzn2.0.1"]
        install_tomcat:
          commands:
            install_tomcat:
              command: !FindInMap ["Scripts", "Tomcat", "InstallTomcat"]
              env:
                NAME: !Ref AWS::StackName
        install_logback:
          files:
            /etc/tomcat/logging.properties:
              content: "handlers = org.slf4j.bridge.SLF4JBridgeHandler"
              owner: root
              group: root
              mode: "000644"
          commands:
            install_logback:
              command: !FindInMap ["Scripts", "Tomcat", "InstallLogback"]
        configure_tomcat:
          files:
            /etc/tomcat/logback.xml:
              content: !Sub |
                <configuration>
                    <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator" />
                    <appender name="LOGFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
                        <file>${!catalina.base}/logs/default.log</file>
                        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                            <fileNamePattern>${!catalina.base}/logs/default.log.%d.gz</fileNamePattern>
                            <maxHistory>20</maxHistory>
                        </rollingPolicy>
                        <encoder>
                            <pattern>%date{yyyy-MM-dd'T'HH:mm:ss.SSS} %-5level [%thread] %logger - %message%n%rootException</pattern>
                        </encoder>
                    </appender>
                    <appender name="SYSLOG-TLS" class="com.papertrailapp.logback.Syslog4jAppender">
                        <layout class="ch.qos.logback.classic.PatternLayout">
                            <pattern>%-5level [%thread] %logger - %message%n%rootException</pattern>
                        </layout>
                        <syslogConfig class="org.productivity.java.syslog4j.impl.net.tcp.ssl.SSLTCPNetSyslogConfig">
                            <host>${papertrailHost}</host>
                            <port>${papertrailPort}</port>
                            <ident>tomcat</ident>
                            <maxMessageLength>128000</maxMessageLength>
                        </syslogConfig>
                    </appender>
                    <root level="INFO">
                        <appender-ref ref="LOGFILE" />
                        <appender-ref ref="SYSLOG-TLS" />
                    </root>
                </configuration>
              owner: root
              group: root
              mode: "000644"
            /etc/tomcat/logback-access.xml:
              content: !Sub |
                <configuration>
                    <statusListener class="ch.qos.logback.core.status.OnConsoleStatusListener" />
                    <appender name="ACCESS-LOGFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
                        <file>${!catalina.base}/logs/access.log</file>
                        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                            <fileNamePattern>${!catalina.base}/logs/access.log.%d.gz</fileNamePattern>
                            <maxHistory>20</maxHistory>
                        </rollingPolicy>
                        <encoder>
                            <pattern>%header{x-forwarded-server} %header{x-forwarded-for}; %clientHost "%requestURL" %statusCode{}sc %bytesSent{}b %elapsedTime{}ms</pattern>
                        </encoder>
                    </appender>
                    <appender name="ACCESS-SYSLOG-TLS" class="com.papertrailapp.logback.Syslog4jAppender">
                        <layout class="ch.qos.logback.access.PatternLayout">
                            <pattern>%header{x-forwarded-server} %header{x-forwarded-for}; %clientHost "%requestURL" %statusCode{}sc %bytesSent{}b %elapsedTime{}ms</pattern>
                        </layout>
                        <syslogConfig class="org.productivity.java.syslog4j.impl.net.tcp.ssl.SSLTCPNetSyslogConfig">
                            <host>${papertrailHost}</host>
                            <port>${papertrailPort}</port>
                            <ident>tomcat-access</ident>
                            <maxMessageLength>128000</maxMessageLength>
                        </syslogConfig>
                    </appender>
                    <appender-ref ref="ACCESS-LOGFILE" />
                    <appender-ref ref="ACCESS-SYSLOG-TLS" />
                </configuration>
              owner: root
              group: root
              mode: "000644"
            /opt/tomcat/bin/setenv.sh:
              content: |
                #!/bin/sh
                export CLASSPATH="$CATALINA_HOME/lib/slf4j-api-1.7.19.jar:$CATALINA_HOME/lib/jul-to-slf4j-1.7.19.jar:$CATALINA_HOME/lib/logback-core-1.1.6.jar:$CATALINA_HOME/lib/logback-classic-1.1.6.jar:$CATALINA_HOME/lib/logback-syslog4j-1.0.0.jar:$CATALINA_HOME/lib/syslog4j-0.9.46.jar:$CATALINA_HOME/conf/"
                export CATALINA_OPTS="-XX:OnOutOfMemoryError=\"kill -9 %p\" -Xms512m -Xmx1024m -Duser.timezone=Etc/UTC"
                export CATALINA_PID="$CATALINA_HOME/pid"
              owner: root
              group: root
              mode: "000755"
            /etc/tomcat/additional.properties:
              content: |
                cassandra.contactpoints={{cassandraContactPoints}}
                jediscache.host={{jediscacheHost}}
                jediscache.port=6379
                org.jooq.no-logo=true
              context:
                cassandraContactPoints:
                  Fn::ImportValue:
                    !Sub "${cassandraStackName}-seed-nodes"
                jediscacheHost:
                  Fn::ImportValue:
                    !Sub "${redisStackName}-redis-dns-name"
              owner: root
              group: root
              mode: "000644"
          commands:
            patch_server_xml:
              command: |
                #!/bin/bash -xe
                export SERVER_XML=/etc/tomcat/server.xml
                sed -i "/<Valve className=\"org.apache.catalina.valves.AccessLogValve\"/c\    <\!-- <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"" ${SERVER_XML}
                sed -i "/<\/Host>/c\-->\n        <Valve className=\"ch.qos.logback.access.tomcat.LogbackValve\"/>\n      <\/Host>" ${SERVER_XML}
            append_catalina_properties:
              command: "cat /etc/tomcat/additional.properties >> /etc/tomcat/catalina.properties"
        deploy_application:
          commands:
            download_war:
              command: !Sub "aws s3 cp s3://${deployableBucketName}/${deployableFileKey} /opt/tomcat/webapps/${applicationContextPath}.war"
        run_tomcat:
          commands:
             run_tomcat:
               command: /opt/tomcat/bin/startup.sh

  autoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref launchConfiguration
      MaxSize: 30
      MinSize: 1
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref targetGroup
      HealthCheckGracePeriod: 180
      HealthCheckType: ELB
      VPCZoneIdentifier:
        - Fn::Select:
          - 0
          - Fn::Split:
            - ","
            - Fn::ImportValue:
                !Sub "${networkStackName}-private-subnets"
        - Fn::Select:
          - 1
          - Fn::Split:
            - ","
            - Fn::ImportValue:
                !Sub "${networkStackName}-private-subnets"
        - Fn::Select:
          - 2
          - Fn::Split:
            - ","
            - Fn::ImportValue:
                !Sub "${networkStackName}-private-subnets"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} AS
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M

Outputs:
  SecurityGroup:
    Description: The tomcat security group, so that other security groups can allow ingress from themselves to it.
    Value: !Ref securityGroup
    Export:
      Name: !Sub ${AWS::StackName}-security-group
