AWSTemplateFormatVersion: 2010-09-09
Description: This template deploys a Cassandra stack into an existing network stack. The Cassandra stack consists of
  up to three seed node instances, and an autoscaling group for additional instances, that need to be configured/started
  manually. Note that scaling down is harder than scaling up. There is no automatism that decommissions on termination,
  so this needs to be done manually.

Parameters:
  networkStackName:
    Description: The name of an existing network stack in which a Cassandra cluster will be created.
    Type: String
    MinLength: 1

  reaperStackName:
    Description: The name of an existing Cassandra Reaper stack, so that this stack can allow ingress from it.
      Note that you still need to manually add and configure the nodes of this cluster in Reaper afterwards.
    Type: String
    MinLength: 1

  keyName:
    Description: The Key Manager key to be added to the list of allowed keys.
    Type: AWS::EC2::KeyPair::KeyName

  instanceType:
    Description: The instance type used for the cassandra nodes.
    Type: String
    MinLength: 1
    Default: r5.large

  authorizedKeys:
    Description: A URL pointing to a list of authorized SSH keys to be appended as-is to ~/.ssh/authorized_keys.
    Type: String
    MinLength: 1

  clusterName:
    Description: The cluster name to be set on the created Cassandra nodes. If you plan on migrating data between two
      clusters, make sure that you give both clusters the same name.
    Type: String
    MinLength: 1

  dataCenterNameSuffix:
    Description: The data center name suffix. By default, the Ec2Snitch names data centers according to the AWS region
      of the deployment (i.e. "eu-central") and the rack according to the availability zone (i.e. "1a"). Appending a
      suffix to the data center name allows multiple data centers of the same cluster to run in the same region. If
      this is not a use case for you, feel free to leave it blank.
    Type: String

  internalDomain:
    Description: The internal DNS domain name to be used by the Cassandra cluster. If you run multiple clusters in the
      same VPC, the internal domain names must be distinct.
    Type: String
    MinLength: 1
    Default: cassandra

  deleteEbsVolumesOnTermination:
    Description: Whether the attached EBS volumes of the cassandra nodes shall be deleted on termination of the node or
      not. In production systems, it might be prudent to set this to false, to ensure that data is never destroyed.
      erroneously.
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "true"

  usedAvailabilityZones:
    Description: The amount of availability zones over which to distribute the cluster.
    Type: Number
    MinValue: 1
    MaxValue: 3
    Default: 3

  volumeSize:
    Description: The initial size of the data volumes.
    Type: Number
    MinValue: 32
    Default: 1024

  influxHost:
    Type: String
    Default: ""

  influxPort:
    Type: Number
    Default: 8086

  influxDatabase:
    Type: String
    Default: ""

  influxTagStage:
    Type: String
    Default: ""

  influxTagProduct:
    Type: String
    Default: ""

  influxTagTeam:
    Type: String
    Default: ""

Conditions:
  useSecondAvailabilityZone:
    Fn::Or:
      - Fn::Equals: [ !Ref usedAvailabilityZones, 2 ]
      - Fn::Equals: [ !Ref usedAvailabilityZones, 3 ]

  useThirdAvailabilityZone:
    Fn::Equals: [ !Ref usedAvailabilityZones, 3 ]

Mappings:
  Regions:
    eu-central-1:
      AmazonLinux2Ami: ami-0f3a43fbf2d3899f7
    eu-west-1:
      AmazonLinux2Ami: ami-01f14919ba412de34

  Scripts:
    Cassandra:
      CreateHostsEntry: |
        #!/bin/bash -xe
        sed -i "/127.0.0.1/c\127.0.0.1 localhost $(curl http://169.254.169.254/latest/meta-data/local-hostname)" /etc/hosts

      SetupDataDirectories: |
        #!/bin/bash -xe
        export CASSANDRA_YAML="/etc/cassandra/conf/cassandra.yaml"
        mkdir /var/cassandra
        blkid $(readlink -f /dev/sdf) || mkfs -t xfs $(readlink -f /dev/sdf)
        mkdir /var/cassandra/data
        xfs_admin -L cassandra-dt $(readlink -f /dev/sdf)
        grep -q ^LABEL=cassandra-dt /etc/fstab || echo "LABEL=cassandra-dt /var/cassandra/data xfs defaults,nofail" >> /etc/fstab
        grep -q "$(readlink -f /dev/sdf) /var/cassandra/data" /proc/mounts || mount /var/cassandra/data
        blkid $(readlink -f /dev/sdg) || mkfs -t xfs $(readlink -f /dev/sdg)
        mkdir /var/cassandra/commitlog
        xfs_admin -L cassandra-cl $(readlink -f /dev/sdg)
        grep -q ^LABEL=cassandra-cl /etc/fstab || echo "LABEL=cassandra-cl /var/cassandra/commitlog xfs defaults" >> /etc/fstab
        grep -q "$(readlink -f /dev/sdg) /var/cassandra/commitlog" /proc/mounts || mount /var/cassandra/commitlog
        chown -R cassandra /var/cassandra
        sed -i "/^data_file_directories:$/ {N; s|data_file_directories:\n    - /var/lib/cassandra/data|data_file_directories:\n    - /var/cassandra/data|g}" ${CASSANDRA_YAML}
        sed -i "/commitlog_directory:/c\commitlog_directory: /var/cassandra/commitlog" ${CASSANDRA_YAML}

      UpdateCassandraYaml: |
        #!/bin/bash -xe
        export CASSANDRA_YAML="/etc/cassandra/conf/cassandra.yaml"
        sed -i "/cluster_name:/c\cluster_name: \'${CLUSTER_NAME}\'" ${CASSANDRA_YAML}
        sed -i "/- seeds:/c\          - seeds: \"${SEED_NODES}\"" ${CASSANDRA_YAML}
        sed -i "/listen_address:/c\listen_address: $(hostname -I)" ${CASSANDRA_YAML}
        sed -i "/start_rpc:/c\start_rpc: true" ${CASSANDRA_YAML}
        sed -i "/^rpc_address:/c\rpc_address: 0.0.0.0" ${CASSANDRA_YAML}
        sed -i "/broadcast_rpc_address:/c\broadcast_rpc_address: $(hostname -I)" ${CASSANDRA_YAML}
        sed -i "/disk_failure_policy:/c\disk_failure_policy: die" ${CASSANDRA_YAML}
        sed -i "/commit_failure_policy:/c\commit_failure_policy: die" ${CASSANDRA_YAML}
        sed -i "/trickle_fsync:/c\trickle_fsync: true" ${CASSANDRA_YAML}
        sed -i "/endpoint_snitch:/c\endpoint_snitch: Ec2Snitch" ${CASSANDRA_YAML}
        sed -i "/read_request_timeout_in_ms:/c\read_request_timeout_in_ms: 60000" ${CASSANDRA_YAML}
        sed -i "/range_request_timeout_in_ms:/c\range_request_timeout_in_ms: 60000" ${CASSANDRA_YAML}
        sed -i "/write_request_timeout_in_ms:/c\write_request_timeout_in_ms: 60000" ${CASSANDRA_YAML}
        sed -i "/counter_write_request_timeout_in_ms:/c\counter_write_request_timeout_in_ms: 60000" ${CASSANDRA_YAML}
        sed -i "/cas_contention_timeout_in_ms:/c\cas_contention_timeout_in_ms: 60000" ${CASSANDRA_YAML}
        sed -i "/truncate_request_timeout_in_ms:/c\truncate_request_timeout_in_ms: 60000" ${CASSANDRA_YAML}
        sed -i "/^request_timeout_in_ms:/c\request_timeout_in_ms: 60000" ${CASSANDRA_YAML}

      UpdateCassandraEnvSh: |
        #!/bin/bash -xe
        export CASSANDRA_ENV_SH="/etc/cassandra/conf/cassandra-env.sh"
        sed -i "/# max(min(1\/2 ram, 1024MB), min(1\/4 ram, 8GB))/c\    # max(min(1\/2 ram, 8GB), min(1\/4 ram, 8GB))" ${CASSANDRA_ENV_SH}
        sed -i "/# calculate 1\/2 ram and cap to 1024MB/c\    # calculate 1\/2 ram and cap to 8192MB" ${CASSANDRA_ENV_SH}
        sed -i "/if \[ \"\$half_system_memory_in_mb\" -gt \"1024\" \]/c\    if \[ \"\$half_system_memory_in_mb\" -gt \"8192\" \]" ${CASSANDRA_ENV_SH}
        sed -i "/half_system_memory_in_mb=\"1024\"/c\        half_system_memory_in_mb=\"8192\"" ${CASSANDRA_ENV_SH}
        sed -i "/# JVM_OPTS=\"\$JVM_OPTS -Djava.rmi.server.hostname=<public name>\"/c\JVM_OPTS=\"\$JVM_OPTS -Djava.rmi.server.hostname=$(hostname -I)\"" ${CASSANDRA_ENV_SH}
        sed -i "/JMX_PORT=\"7199\"/c\JMX_PORT=\"7199\"\nLOCAL_JMX=no" ${CASSANDRA_ENV_SH}
        sed -i "/JVM_OPTS=\"\$JVM_OPTS -Dcassandra.jmx.remote.port=\$JMX_PORT\"/c\  JVM_OPTS=\"\$JVM_OPTS -Dcom.sun.management.jmxremote.port=\$JMX_PORT\"" ${CASSANDRA_ENV_SH}
        sed -i "/JVM_OPTS=\"\$JVM_OPTS -Dcom.sun.management.jmxremote.authenticate=true\"/c\  JVM_OPTS=\"\$JVM_OPTS -Dcom.sun.management.jmxremote.authenticate=false\"\n  JVM_OPTS=\"\$JVM_OPTS -Dcom.sun.management.jmxremote.ssl=false\"" ${CASSANDRA_ENV_SH}

      UpdateJvmOptions: |
        #!/bin/bash -xe
        export JVM_OPTIONS="/etc/cassandra/conf/jvm.options"
        sed -i "/-XX:+HeapDumpOnOutOfMemoryError/c\#-XX:+HeapDumpOnOutOfMemoryError" ${JVM_OPTIONS}
        sed -i "/-XX:+UseParNewGC/c\#-XX:+UseParNewGC" ${JVM_OPTIONS}
        sed -i "/-XX:+UseConcMarkSweepGC/c\#-XX:+UseConcMarkSweepGC" ${JVM_OPTIONS}
        sed -i "/-XX:+CMSParallelRemarkEnabled/c\#-XX:+CMSParallelRemarkEnabled" ${JVM_OPTIONS}
        sed -i "/-XX:SurvivorRatio=8/c\#-XX:SurvivorRatio=8" ${JVM_OPTIONS}
        sed -i "/-XX:MaxTenuringThreshold=1/c\#-XX:MaxTenuringThreshold=1" ${JVM_OPTIONS}
        sed -i "/-XX:CMSInitiatingOccupancyFraction=75/c\#-XX:CMSInitiatingOccupancyFraction=75" ${JVM_OPTIONS}
        sed -i "/-XX:+UseCMSInitiatingOccupancyOnly/c\#-XX:+UseCMSInitiatingOccupancyOnly" ${JVM_OPTIONS}
        sed -i "/-XX:CMSWaitDuration=10000/c\#-XX:CMSWaitDuration=10000" ${JVM_OPTIONS}
        sed -i "/-XX:+CMSParallelInitialMarkEnabled/c\#-XX:+CMSParallelInitialMarkEnabled" ${JVM_OPTIONS}
        sed -i "/-XX:+CMSEdenChunksRecordAlways/c\#-XX:+CMSEdenChunksRecordAlways" ${JVM_OPTIONS}
        sed -i "/-XX:+CMSClassUnloadingEnabled/c\#-XX:+CMSClassUnloadingEnabled" ${JVM_OPTIONS}
        sed -i "/#-XX:+UseG1GC/c\-XX:+UseG1GC" ${JVM_OPTIONS}
        sed -i "/#-XX:MaxGCPauseMillis=500/c\-XX:MaxGCPauseMillis=1000" ${JVM_OPTIONS}
        sed -i "/#-Xloggc:\/var\/log\/cassandra\/gc.log/c\-Xloggc:\/var\/log\/cassandra\/gc.log" ${JVM_OPTIONS}

      UpdateCassandraRackdcProperties: |
        #!/bin/bash -xe
        export CASSANDRA_RACKDC_PROPERTIES="/etc/cassandra/conf/cassandra-rackdc.properties"
        sed -i "/#dc_suffix=/c\dc_suffix=${DATACENTER_NAME_SUFFIX}" ${CASSANDRA_RACKDC_PROPERTIES}

      DisableBootstrapping: |
        #!/bin/bash -x
        export CASSANDRA_YAML="/etc/cassandra/conf/cassandra.yaml"
        echo 'auto_bootstrap: false' >> ${CASSANDRA_YAML}

      RegisterDns: |
        #!/bin/bash -e
        if [ $# -lt 1 ]; then
            echo "Syntax: register-dns.sh [a/b/c]"
            exit 1
        fi
        export HOSTNAME=$(hostname -I)
        export INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
        echo "{\"Changes\": [{\"Action\": \"UPSERT\", \"ResourceRecordSet\": {\"Name\": \"$1.seed.{{internalDomain}}\", \"Type\": \"A\", \"TTL\": 60, \"ResourceRecords\": [{\"Value\": \"${HOSTNAME}\"}]}}]}" > /home/ec2-user/change-batch.json
        aws route53 change-resource-record-sets --hosted-zone-id {{hostedZone}} --change-batch file:///home/ec2-user/change-batch.json
        rm /home/ec2-user/change-batch.json
        echo "${HOSTNAME} $1.seed.{{internalDomain}}" | sudo tee -a /etc/hosts

      CassandraWatchdog: |
        #!/bin/bash
        CASSANDRA_PID=`cat /run/cassandra/cassandra.pid`
        case "$(ps ax |grep -v grep |grep -c $CASSANDRA_PID)" in
                0) echo "`date --iso-8601=seconds` Cassandra process crashed">>/home/ec2-user/cassandraWatchdog.log
                sudo service cassandra stop
                sleep 1
                sudo service cassandra start
                exit
        esac
        nodetool info &> /dev/null
        if [ "$?" -eq "1" ]; then
                echo "`date --iso-8601=seconds` Nodetool info not responding">>/home/ec2-user/cassandraWatchdog.log
                sudo service cassandra stop
                sleep 1
                sudo service cassandra start
        fi

    Telegraf:
      AddInstanceIdToTelegrafConf: |
        #!/bin/bash -xe
        export INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
        sed -i "/  instance =/c\  instance = \"${INSTANCE_ID}\"" /etc/telegraf/telegraf.conf

  Files:
    Telegraf:
      InfluxDbRepo: |
        [influxdb]
        name = InfluxDB Repository - RHEL
        baseurl = https://repos.influxdata.com/rhel/7/x86_64/stable/
        enabled = 1
        gpgcheck = 1
        gpgkey = https://repos.influxdata.com/influxdb.key

      TelegrafConf: |
        [global_tags]
          stage = "{{influxTagStage}}"
          product = "{{influxTagProduct}}"
          region = "${AWS::Region}"
          team = "{{influxTagTeam}}"
          instance =
        [agent]
          interval = "10s"
          round_interval = true
          metric_batch_size = 1000
          metric_buffer_limit = 10000
          collection_jitter = "0s"
          flush_interval = "10s"
          flush_jitter = "0s"
          precision = ""
          debug = false
          quiet = false
          logfile = ""
          hostname = ""
          omit_hostname = false
        [[outputs.influxdb]]
          urls = ["http://{{influxHost}}:{{influxPort}}"]
          database = "{{influxDatabase}}"
        [[inputs.cpu]]
          percpu = true
          totalcpu = true
          collect_cpu_time = false
          report_active = false
        [[inputs.disk]]
          ignore_fs = ["tmpfs", "devtmpfs", "devfs", "overlay", "aufs", "squashfs"]

Resources:
  securityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName} Cassandra Security Group
      GroupDescription: !Sub ${AWS::StackName} Cassandra Security Group
      VpcId:
        Fn::ImportValue:
          !Sub "${networkStackName}-vpc"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Cassandra Security Group

  bastion22Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref securityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        Fn::ImportValue:
          !Sub "${networkStackName}-bastion-security-group"

  bastion9042Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref securityGroup
      IpProtocol: tcp
      FromPort: 9042
      ToPort: 9042
      SourceSecurityGroupId:
        Fn::ImportValue:
          !Sub "${networkStackName}-bastion-security-group"

  port7000securityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref securityGroup
      IpProtocol: tcp
      FromPort: 7000
      ToPort: 7000
      SourceSecurityGroupId: !Ref securityGroup

  port7001securityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref securityGroup
      IpProtocol: tcp
      FromPort: 7001
      ToPort: 7001
      SourceSecurityGroupId: !Ref securityGroup

  port7199securityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref securityGroup
      IpProtocol: tcp
      FromPort: 7199
      ToPort: 7199
      SourceSecurityGroupId: !Ref securityGroup

  reaper7199Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref securityGroup
      IpProtocol: tcp
      FromPort: 7199
      ToPort: 7199
      SourceSecurityGroupId:
        Fn::ImportValue:
          !Sub "${reaperStackName}-security-group"

  port9042securityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref securityGroup
      IpProtocol: tcp
      FromPort: 9042
      ToPort: 9042
      SourceSecurityGroupId: !Ref securityGroup

  port9160securityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref securityGroup
      IpProtocol: tcp
      FromPort: 9160
      ToPort: 9160
      SourceSecurityGroupId: !Ref securityGroup

  hostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      Name: !Ref internalDomain
      VPCs:
        - VPCId:
            Fn::ImportValue:
              !Sub "${networkStackName}-vpc"
          VPCRegion: !Ref "AWS::Region"

  allowRoute53RecordSetManagementRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "AllowAllPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "route53:GetHostedZone"
                  - "route53:ListHostedZones"
                  - "route53:ListResourceRecordSets"
                  - "route53:ChangeResourceRecordSets"
                Resource: "*"

  instanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref allowRoute53RecordSetManagementRole

  launchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap
        - Regions
        - !Ref AWS::Region
        - AmazonLinux2Ami
      IamInstanceProfile: !Ref instanceProfile
      KeyName: !Ref keyName
      InstanceType: !Ref instanceType
      SecurityGroups:
        - !Ref securityGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/sdf"
          Ebs:
            VolumeSize: !Ref volumeSize
            VolumeType: "gp2"
            DeleteOnTermination: !Ref deleteEbsVolumesOnTermination
        - DeviceName: "/dev/sdg"
          Ebs:
            VolumeSize: 64
            VolumeType: "gp2"
            DeleteOnTermination: !Ref deleteEbsVolumesOnTermination
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          echo "${project.version} - ${timestamp}"
          yum update -y
          if [ -n "${influxHost}" ]
          then
              CONFIG_SET=setup_with_telegraf
          else
              CONFIG_SET=setup_without_telegraf
          fi
          /opt/aws/bin/cfn-init -v --configsets $CONFIG_SET --stack ${AWS::StackName} --resource launchConfiguration --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource autoScalingGroup --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          basics:
            - "ssh_keys"
            - "ntp"
            - "haveged"
            - "openjdk8"
          cassandra:
            - "add_cassandra_repo"
            - "install_cassandra"
            - "configure_cassandra"
            - "cassandra_watchdog"
            - "create_dns_script"
            - "create_disable_bootstrapping_script"
          setup_with_telegraf:
            - ConfigSet: "basics"
            - "add_influxdb_repo"
            - "install_telegraf"
            - "configure_telegraf"
            - "start_telegraf"
            - ConfigSet: "cassandra"
          setup_without_telegraf:
            - ConfigSet: "basics"
            - ConfigSet: "cassandra"
        ssh_keys:
          files:
            /home/ec2-user/.ssh/additional_keys:
              source: !Ref authorizedKeys
              owner: root
              group: root
              mode: "000644"
          commands:
            register_additional_keys:
              command: "cat /home/ec2-user/.ssh/additional_keys >> /home/ec2-user/.ssh/authorized_keys"
        ntp:
          packages:
            yum:
              ntp: []
          services:
            sysvinit:
              ntpd:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                    - ntp
        haveged:
          packages:
            rpm:
              haveged: "https://dl.fedoraproject.org/pub/archive/epel/7/x86_64/Packages/h/haveged-1.9.1-1.el7.x86_64.rpm"
          services:
            sysvinit:
              haveged:
                enabled: true
                ensureRunning: true
        openjdk8:
          packages:
            yum:
              java-1.8.0-openjdk: ["1.8.0.222.b10-0.amzn2.0.1"]
              java-1.8.0-openjdk-devel: ["1.8.0.222.b10-0.amzn2.0.1"]
        add_influxdb_repo:
          files:
            /etc/yum.repos.d/influxdb.repo:
              content: !FindInMap ["Files", "Telegraf", "InfluxDbRepo"]
              owner: root
              group: root
              mode: "000644"
        install_telegraf:
          packages:
            yum:
              telegraf: []
        configure_telegraf:
          files:
            /etc/telegraf/telegraf.conf:
              content: !FindInMap ["Files", "Telegraf", "TelegrafConf"]
              context:
                influxHost: !Ref influxHost
                influxPort: !Ref influxPort
                influxDatabase: !Ref influxDatabase
                influxTagStage: !Ref influxTagStage
                influxTagProduct: !Ref influxTagProduct
                influxTagTeam: !Ref influxTagTeam
              owner: ec2-user
              group: ec2-user
              mode: "000644"
          commands:
            add_instance_id_to_telegraf_conf:
              command: !FindInMap ["Scripts", "Telegraf", "AddInstanceIdToTelegrafConf"]
        start_telegraf:
          services:
            sysvinit:
              telegraf:
                enabled: true
                ensureRunning: true
        add_cassandra_repo:
          files:
            /etc/yum.repos.d/cassandra.repo:
              content: |
                [cassandra]
                name=Apache Cassandra
                baseurl=https://www.apache.org/dist/cassandra/redhat/311x/
                gpgcheck=1
                repo_gpgcheck=1
                gpgkey=https://www.apache.org/dist/cassandra/KEYS
              owner: root
              group: root
              mode: "000644"
        install_cassandra:
          packages:
            yum:
              cassandra: []
        configure_cassandra:
          commands:
            01_configure_hosts:
              command: !FindInMap ["Scripts", "Cassandra", "CreateHostsEntry"]
            02_setup_data_directories:
              command: !FindInMap ["Scripts", "Cassandra", "SetupDataDirectories"]
            03_update_cassandra_yaml:
              command: !FindInMap ["Scripts", "Cassandra", "UpdateCassandraYaml"]
              env:
                CLUSTER_NAME: !Ref clusterName
                SEED_NODES: !Join
                  - ""
                  - - "a.seed."
                    - !Ref internalDomain
                    - ",b.seed."
                    - !Ref internalDomain
                    - ",c.seed."
                    - !Ref internalDomain
            04_update_cassandra_env_sh:
              command: !FindInMap ["Scripts", "Cassandra", "UpdateCassandraEnvSh"]
            05_update_jvm_options:
              command: !FindInMap ["Scripts", "Cassandra", "UpdateJvmOptions"]
            06_update_cassandra_rackdc_properties:
              command: !FindInMap ["Scripts", "Cassandra", "UpdateCassandraRackdcProperties"]
        cassandra_watchdog:
          files:
            /etc/cron.hourly/cassandra-watchdog.sh:
              content: !FindInMap ["Scripts", "Cassandra", "CassandraWatchdog"]
              owner: root
              group: root
              mode: "000755"
        create_dns_script:
          files:
            /home/ec2-user/register-dns.sh:
              content: !FindInMap ["Scripts", "Cassandra", "RegisterDns"]
              context:
                internalDomain: !Ref internalDomain
                hostedZone: !Ref hostedZone
              owner: ec2-user
              group: ec2-user
              mode: "000755"
        create_disable_bootstrapping_script:
          files:
            /home/ec2-user/disable-bootstrapping.sh:
              content: !FindInMap ["Scripts", "Cassandra", "DisableBootstrapping"]
              owner: ec2-user
              group: ec2-user
              mode: "000755"

  autoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref launchConfiguration
      MaxSize: 30
      MinSize: 0
      DesiredCapacity: 0
      VPCZoneIdentifier:
        - Fn::Select:
            - 0
            - Fn::Split:
                - ","
                - Fn::ImportValue:
                    !Sub "${networkStackName}-private-subnets"
        - Fn::If:
          - useSecondAvailabilityZone
          - Fn::Select:
            - 1
            - Fn::Split:
                - ","
                - Fn::ImportValue:
                    !Sub "${networkStackName}-private-subnets"
          - !Ref AWS::NoValue
        - Fn::If:
          - useThirdAvailabilityZone
          - Fn::Select:
            - 2
            - Fn::Split:
                - ","
                - Fn::ImportValue:
                    !Sub "${networkStackName}-private-subnets"
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} AS
          PropagateAtLaunch: true

Outputs:
  securityGroup:
    Description: The cassandra security group, so that other security groups can allow SSH ingress from it, or register
      additional security group ingress on it.
    Value: !Ref securityGroup
    Export:
      Name: !Sub ${AWS::StackName}-security-group

  seedNodes:
    Description: The list of seed nodes to be used by connecting systems.
    Value: !Join
      - ","
      - - !Sub "a.seed.${internalDomain}"
        - !Sub "b.seed.${internalDomain}"
        - !Sub "c.seed.${internalDomain}"
    Export:
      Name: !Sub ${AWS::StackName}-seed-nodes

  dataCenterName:
    Description: The name of the Cassandra data center that is contained in this stack.
    Value:
      Fn::Join:
        - ""
        - - Fn::Select:
              - 0
              - Fn::Split:
                  - "-"
                  - !Ref AWS::Region
          - "-"
          - Fn::Select:
              - 1
              - Fn::Split:
                  - "-"
                  - !Ref AWS::Region
          - !Ref dataCenterNameSuffix
    Export:
      Name: !Sub ${AWS::StackName}-data-center-name