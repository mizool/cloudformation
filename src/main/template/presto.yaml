AWSTemplateFormatVersion: 2010-09-09
Description: This template deploys a Presto cluster connected to a cassandra database.

Parameters:
  vpcStackName:
    Description: The name of an existing VPC stack in which Presto will be deployed.
    Type: String
    MinLength: 1

  coordinatorInstanceType:
    Description: The instance type used for the Presto coordinator.
    Type: String
    MinLength: 1
    Default: r5.large

  workerInstanceType:
    Description: The instance type used for the Presto workers.
    Type: String
    MinLength: 1
    Default: r5.large

  cassandraStackName:
    Description: The name of an existing Cassandra stack that Presto will get access to.
    Type: String
    MinLength: 1

  environmentName:
    Description: The name of the Presto environment that will be created.
    Type: String
    MinLength: 2
    AllowedPattern: "^[a-z0-9]*$"

  privateLoadBalancerStackName:
    Description: The name of an existing private load balancer stack that Presto will add a listener to, and register
      its coordinator target group on it.
    Type: String
    MinLength: 1

  ami:
    Description: The AMI used to create the instances. By default, Amazon Linux 2 is used.
    Type: AWS::EC2::Image::Id
    Default: ami-0f3a43fbf2d3899f7

  keyName:
    Description: The Key Manager key to be added to the list of allowed keys.
    Type: AWS::EC2::KeyPair::KeyName

  authorizedKeys:
    Description: A URL pointing to a list of authorized SSH keys to be appended as-is to ~/.ssh/authorized_keys.
    Type: String
    MinLength: 1

Resources:
  coordinatorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName} Coordinator Security Group
      GroupDescription: !Sub ${AWS::StackName} Coordinator Security Group
      VpcId:
        Fn::ImportValue:
          !Sub "${vpcStackName}-vpc"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Coordinator Security Group

  workerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName} Worker Security Group
      GroupDescription: !Sub ${AWS::StackName} Worker Security Group
      VpcId:
        Fn::ImportValue:
          !Sub "${vpcStackName}-vpc"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Worker Security Group

  bastionCoordinator22Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref coordinatorSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        Fn::ImportValue:
          !Sub "${vpcStackName}-bastion-security-group"

  bastionWorker22Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref workerSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        Fn::ImportValue:
          !Sub "${vpcStackName}-bastion-security-group"

  loadBalancerCoordinator8080Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref coordinatorSecurityGroup
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId:
        Fn::ImportValue:
          !Sub "${privateLoadBalancerStackName}-security-group"

  workerLoadBalancer8080Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::ImportValue:
          !Sub "${privateLoadBalancerStackName}-security-group"
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref workerSecurityGroup

  coordinatorWorker8080Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref workerSecurityGroup
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref coordinatorSecurityGroup

  workerCoordinator8080Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref coordinatorSecurityGroup
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref workerSecurityGroup

  coordinatorCassandra9042Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::ImportValue:
          !Sub "${cassandraStackName}-security-group"
      IpProtocol: tcp
      FromPort: 9042
      ToPort: 9042
      SourceSecurityGroupId: !Ref coordinatorSecurityGroup

  workerCassandra9042Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::ImportValue:
          !Sub "${cassandraStackName}-security-group"
      IpProtocol: tcp
      FromPort: 9042
      ToPort: 9042
      SourceSecurityGroupId: !Ref workerSecurityGroup

  coordinatorCassandra9160Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::ImportValue:
          !Sub "${cassandraStackName}-security-group"
      IpProtocol: tcp
      FromPort: 9160
      ToPort: 9160
      SourceSecurityGroupId: !Ref coordinatorSecurityGroup

  workerCassandra9160Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::ImportValue:
          !Sub "${cassandraStackName}-security-group"
      IpProtocol: tcp
      FromPort: 9160
      ToPort: 9160
      SourceSecurityGroupId: !Ref workerSecurityGroup

  coordinatorTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /v1/info
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Sub "${vpcStackName}-vpc"

  workerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /v1/info
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Sub "${vpcStackName}-vpc"

  coordinatorListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref coordinatorTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "*"
      ListenerArn:
        Fn::ImportValue:
          !Sub "${privateLoadBalancerStackName}-private-lb-listener8080"
      Priority: 1

  # This only exists so that the target group is not unused. The health checks for an unused target group are not even
  # attempted, messing up the autoscaling checks.
  workerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref workerTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "*"
      ListenerArn:
        Fn::ImportValue:
          !Sub "${privateLoadBalancerStackName}-private-lb-listener8080"
      Priority: 2

  coordinatorLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ami
      KeyName: !Ref keyName
      InstanceType: !Ref coordinatorInstanceType
      SecurityGroups:
        - !Ref coordinatorSecurityGroup
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash -xe
           yum update -y
           /opt/aws/bin/cfn-init -v --configsets setup --stack ${AWS::StackName} --resource coordinatorLaunchConfiguration --region ${AWS::Region}
           /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource coordinatorAutoScalingGroup --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - "ssh_keys"
            - "ntp"
            - "haveged"
            - "openjdk8"
            - "download_presto"
            - "configure_presto"
            - "start_presto"
            - "setup_presto_cli"
        ssh_keys:
          files:
            /home/ec2-user/.ssh/additional_keys:
              source: !Ref authorizedKeys
              owner: root
              group: root
              mode: "000644"
          commands:
            register_additional_keys:
              command: "cat /home/ec2-user/.ssh/additional_keys >> /home/ec2-user/.ssh/authorized_keys"
        ntp:
          packages:
            yum:
              ntp: []
          services:
            sysvinit:
              ntpd:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                    - ntp
        haveged:
          packages:
            rpm:
              haveged: "http://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/h/haveged-1.9.1-1.el7.x86_64.rpm"
          services:
            sysvinit:
              haveged:
                enabled: true
                ensureRunning: true
        openjdk8:
          packages:
            yum:
              java-1.8.0-openjdk: ["1.8.0.222.b10-0.amzn2.0.1"]
              java-1.8.0-openjdk-devel: ["1.8.0.222.b10-0.amzn2.0.1"]
        download_presto:
          commands:
            download_presto:
              command: |
                #!/bin/bash -xe
                mkdir /opt/presto
                wget -q -O - "https://repo1.maven.org/maven2/io/prestosql/presto-server/326/presto-server-326.tar.gz" | tar xvzf - -C /opt/presto
                mv "/opt/presto/presto-server-326" /opt/presto/presto-server
                mkdir /var/presto
                mkdir /var/presto/data
        configure_presto:
          files:
            /opt/presto/presto-server/etc/node.properties:
              content: |
                node.data-dir=/var/presto/data
                node.environment={{nodeEnvironment}}
              context:
                nodeEnvironment: !Ref environmentName
              owner: root
              group: root
              mode: "000644"
            /opt/presto/presto-server/etc/jvm.config:
              content: |
                -server
                -XX:-UseBiasedLocking
                -XX:+UseG1GC
                -XX:G1HeapRegionSize=32M
                -XX:+ExplicitGCInvokesConcurrent
                -XX:OnOutOfMemoryError="kill -9 %p"
                -XX:+UseGCOverheadLimit
                -XX:ReservedCodeCacheSize=512M
                -Djdk.attach.allowAttachSelf=true
                -Djdk.nio.maxCachedBufferSize=2000000
              owner: root
              group: root
              mode: "000644"
            /opt/presto/presto-server/etc/config.properties:
              content: |
                http-server.http.port=8080
                query.max-memory=50GB
                query.max-memory-per-node=1GB
                query.max-total-memory-per-node=2GB
                coordinator=true
                node-scheduler.include-coordinator=false
                discovery-server.enabled=true
                discovery.uri=http://localhost:8080
              owner: root
              group: root
              mode: "000644"
            /opt/presto/presto-server/etc/catalog/cassandra.properties:
              content: |
                connector.name=cassandra
                cassandra.contact-points={{cassandraContactPoints}}
                cassandra.consistency-level=LOCAL_QUORUM
                cassandra.client.read-timeout=2m
              context:
                cassandraContactPoints:
                  Fn::ImportValue:
                    !Sub "${cassandraStackName}-seed-nodes"
              owner: root
              group: root
              mode: "000644"
          commands:
            patch_jvm_config:
              command: |
                export SYSTEM_MEMORY_IN_MB=`free -m | awk '/:/ {print $2;exit}'`
                export HEAP_SIZE=`expr $SYSTEM_MEMORY_IN_MB / 4 \* 3`
                echo "-Xms${HEAP_SIZE}M" >> /opt/presto/presto-server/etc/jvm.config
                echo "-Xmx${HEAP_SIZE}M" >> /opt/presto/presto-server/etc/jvm.config
            patch_node_properties:
              command: |
                export INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                echo "node.id=${INSTANCE_ID}" >> /opt/presto/presto-server/etc/node.properties
        start_presto:
          commands:
            start_presto:
              command: |
                #!/bin/bash -xe
                /opt/presto/presto-server/bin/launcher start
        setup_presto_cli:
          commands:
            setup_presto_cli:
              command: |
                #!/bin/bash -xe
                mkdir /opt/presto/presto-cli
                wget -O /opt/presto/presto-cli/presto-cli-executable.jar "https://repo1.maven.org/maven2/io/prestosql/presto-cli/326/presto-cli-326-executable.jar"
                chmod +x /opt/presto/presto-cli/presto-cli-executable.jar
                ln -s /opt/presto/presto-cli/presto-cli-executable.jar /bin/presto

  workerLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ami
      KeyName: !Ref keyName
      InstanceType: !Ref workerInstanceType
      SecurityGroups:
        - !Ref workerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash -xe
           yum update -y
           /opt/aws/bin/cfn-init -v --configsets setup --stack ${AWS::StackName} --resource workerLaunchConfiguration --region ${AWS::Region}
           /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource workerAutoScalingGroup --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - "ssh_keys"
            - "ntp"
            - "haveged"
            - "openjdk8"
            - "download_presto"
            - "configure_presto"
            - "start_presto"
        ssh_keys:
          files:
            /home/ec2-user/.ssh/additional_keys:
              source: !Ref authorizedKeys
              owner: root
              group: root
              mode: "000644"
          commands:
            register_additional_keys:
              command: "cat /home/ec2-user/.ssh/additional_keys >> /home/ec2-user/.ssh/authorized_keys"
        ntp:
          packages:
            yum:
              ntp: []
          services:
            sysvinit:
              ntpd:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                    - ntp
        haveged:
          packages:
            rpm:
              haveged: "http://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/h/haveged-1.9.1-1.el7.x86_64.rpm"
          services:
            sysvinit:
              haveged:
                enabled: true
                ensureRunning: true
        openjdk8:
          packages:
            yum:
              java-1.8.0-openjdk: ["1.8.0.222.b10-0.amzn2.0.1"]
              java-1.8.0-openjdk-devel: ["1.8.0.222.b10-0.amzn2.0.1"]
        download_presto:
          commands:
            download_presto:
              command: |
                #!/bin/bash -xe
                mkdir /opt/presto
                wget -q -O - "https://repo1.maven.org/maven2/io/prestosql/presto-server/326/presto-server-326.tar.gz" | tar xvzf - -C /opt/presto
                mv "/opt/presto/presto-server-326" /opt/presto/presto-server
                mkdir /var/presto
                mkdir /var/presto/data
        configure_presto:
          files:
            /opt/presto/presto-server/etc/node.properties:
              content: |
                node.data-dir=/var/presto/data
                node.environment={{nodeEnvironment}}
              context:
                nodeEnvironment: !Ref environmentName
              owner: root
              group: root
              mode: "000644"
            /opt/presto/presto-server/etc/jvm.config:
              content: |
                -server
                -XX:-UseBiasedLocking
                -XX:+UseG1GC
                -XX:G1HeapRegionSize=32M
                -XX:+ExplicitGCInvokesConcurrent
                -XX:OnOutOfMemoryError="kill -9 %p"
                -XX:+UseGCOverheadLimit
                -XX:ReservedCodeCacheSize=512M
                -Djdk.attach.allowAttachSelf=true
                -Djdk.nio.maxCachedBufferSize=2000000
              owner: root
              group: root
              mode: "000644"
            /opt/presto/presto-server/etc/config.properties:
              content: |
                http-server.http.port=8080
                query.max-memory=50GB
                query.max-memory-per-node=1GB
                query.max-total-memory-per-node=2GB
                coordinator=false
                discovery.uri=http://{{discoveryUri}}:8080
              context:
                discoveryUri:
                  Fn::ImportValue:
                    !Sub "${privateLoadBalancerStackName}-private-lb-dns-name"
              owner: root
              group: root
              mode: "000644"
            /opt/presto/presto-server/etc/catalog/cassandra.properties:
              content: |
                connector.name=cassandra
                cassandra.contact-points={{cassandraContactPoints}}
                cassandra.consistency-level=LOCAL_QUORUM
                cassandra.client.read-timeout=2m
              context:
                cassandraContactPoints:
                  Fn::ImportValue:
                    !Sub "${cassandraStackName}-seed-nodes"
              owner: root
              group: root
              mode: "000644"
          commands:
            patch_jvm_config:
              command: |
                export SYSTEM_MEMORY_IN_MB=`free -m | awk '/:/ {print $2;exit}'`
                export HEAP_SIZE=`expr $SYSTEM_MEMORY_IN_MB / 4 \* 3`
                echo "-Xms${HEAP_SIZE}M" >> /opt/presto/presto-server/etc/jvm.config
                echo "-Xmx${HEAP_SIZE}M" >> /opt/presto/presto-server/etc/jvm.config
            patch_node_properties:
              command: |
                export INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                echo "node.id=${INSTANCE_ID}" >> /opt/presto/presto-server/etc/node.properties
        start_presto:
          commands:
            start_presto:
              command: |
                #!/bin/bash -xe
                /opt/presto/presto-server/bin/launcher start

  coordinatorAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref coordinatorLaunchConfiguration
      TargetGroupARNs:
        - !Ref coordinatorTargetGroup
      MaxSize: 2
      MinSize: 1
      DesiredCapacity: 1
      HealthCheckGracePeriod: 240
      HealthCheckType: ELB
      VPCZoneIdentifier:
        - Fn::Select:
          - 0
          - Fn::Split:
            - ","
            - Fn::ImportValue:
                !Sub "${vpcStackName}-private-subnets"
        - Fn::Select:
          - 1
          - Fn::Split:
            - ","
            - Fn::ImportValue:
                !Sub "${vpcStackName}-private-subnets"
        - Fn::Select:
          - 2
          - Fn::Split:
            - ","
            - Fn::ImportValue:
                !Sub "${vpcStackName}-private-subnets"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Coordinator
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M

  workerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref workerLaunchConfiguration
      TargetGroupARNs:
        - !Ref workerTargetGroup
      MaxSize: 20
      MinSize: 1
      DesiredCapacity: 1
      HealthCheckGracePeriod: 240
      HealthCheckType: ELB
      VPCZoneIdentifier:
        - Fn::Select:
          - 0
          - Fn::Split:
            - ","
            - Fn::ImportValue:
                !Sub "${vpcStackName}-private-subnets"
        - Fn::Select:
          - 1
          - Fn::Split:
            - ","
            - Fn::ImportValue:
                !Sub "${vpcStackName}-private-subnets"
        - Fn::Select:
          - 2
          - Fn::Split:
            - ","
            - Fn::ImportValue:
                !Sub "${vpcStackName}-private-subnets"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Worker
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M

Outputs:
  SecurityGroup:
    Description: The presto coordinator security group, so that other security groups can allow ingress from themselves
      to it.
    Value: !Ref coordinatorSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-security-group

  DnsName:
    Description: The DNS name under which presto is reachable.
    Value:
      Fn::ImportValue:
        !Sub "${privateLoadBalancerStackName}-private-lb-dns-name"
    Export:
      Name: !Sub ${AWS::StackName}-dns-name

  LbSecurityGroup:
    Description: The security group of the private load balancer used by Presto
    Value:
      Fn::ImportValue:
        !Sub "${privateLoadBalancerStackName}-security-group"
    Export:
      Name: !Sub ${AWS::StackName}-private-lb-security-group
