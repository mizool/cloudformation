AWSTemplateFormatVersion: 2010-09-09
Description: This template deploys a network structure into a new CIDR range of an existing VPC. Its IP range is
  quartered into four parts. The first three parts form private subnets, the fourth is again quartered into three public
  subnets. Both the private and the public subnets are then spread across three Availability Zones. All the required
  infrastructure, like nat gateways, and default routes are included. Also, a bastion jump host is deployed in order to
  make any private machines reachable.

Parameters:
  vpcStackName:
    Description: The name of an existing VPC stack in which the CIDR range and subnets will be created.
    Type: String

  vpcId:
    Description: If the VPC in which the CIDR range will be created is not CloudFormation managed, enter its id here.
      Otherwise, leave it blank.
    Type: AWS::EC2::VPC::Id

  internetGatewayId:
    Description: If the VPC in which the CIDR range will be created is not CloudFormation managed, enter its internet
      gateway id here. Otherwise, leave it blank.
    Type: String

  cidrBlock:
    Description: The additional CIDR range to be added to the VPC. Note that the maximum size of a VPC CIDR range is
      16 bits.
    Type: String
    Default: 10.0.0.0/16

  firstQuarteringCidrBits:
    Description: The cidr bits for the four subnets on the first level ("private subnet A", "private subnet B",
      "private subnet C", "subnet containing public subnets A to C").
    Type: String
    Default: 14

  secondQuarteringCidrBits:
    Description: The cidr bits for the four subnets on the second level ("public subnet A", "public subnet B", "public
      subnet C", "unused").
    Type: String
    Default: 12

  keyName:
    Description: The Key Manager key to be added to the list of allowed keys.
    Type: AWS::EC2::KeyPair::KeyName

  bastionInstanceType:
    Description: The instance type used for the bastion jump host.
    Type: String
    Default: t2.nano

  bastionAuthorizedKeys:
    Description: A URL pointing to a list of authorized SSH keys to be appended as-is to ~/.ssh/authorized_keys.
    Type: String
    MinLength: 1

Mappings:
  Regions:
    eu-central-1:
      AmazonLinux2Ami: ami-0f3a43fbf2d3899f7
    eu-west-1:
      AmazonLinux2Ami: ami-01f14919ba412de34

Conditions:
  vpcIsCloudFormationStack:
    Fn::Equals:
      - !Ref vpcId
      - ""

Resources:
  privateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::If:
          - vpcIsCloudFormationStack
          - Fn::ImportValue:
              !Sub "${vpcStackName}-vpc"
          - !Ref vpcId
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: ""
      CidrBlock: !Select
        - 0
        - Fn::Cidr:
          - !Ref cidrBlock
          - "4"
          - !Ref firstQuarteringCidrBits
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet AZ A

  privateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::If:
          - vpcIsCloudFormationStack
          - Fn::ImportValue:
              !Sub "${vpcStackName}-vpc"
          - !Ref vpcId
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: ""
      CidrBlock: !Select
        - 1
        - Fn::Cidr:
          - !Ref cidrBlock
          - "4"
          - !Ref firstQuarteringCidrBits
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet AZ B

  privateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::If:
          - vpcIsCloudFormationStack
          - Fn::ImportValue:
              !Sub "${vpcStackName}-vpc"
          - !Ref vpcId
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: ""
      CidrBlock: !Select
        - 2
        - Fn::Cidr:
          - !Ref cidrBlock
          - "4"
          - !Ref firstQuarteringCidrBits
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet AZ C

  publicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::If:
          - vpcIsCloudFormationStack
          - Fn::ImportValue:
              !Sub "${vpcStackName}-vpc"
          - !Ref vpcId
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: ""
      CidrBlock: !Select
        - 0
        - Fn::Cidr:
          - !Select
            - 3
            - Fn::Cidr:
              - !Ref cidrBlock
              - "4"
              - !Ref firstQuarteringCidrBits
          - "4"
          - !Ref secondQuarteringCidrBits
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet AZ A

  publicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::If:
          - vpcIsCloudFormationStack
          - Fn::ImportValue:
              !Sub "${vpcStackName}-vpc"
          - !Ref vpcId
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: ""
      CidrBlock: !Select
        - 1
        - Fn::Cidr:
          - !Select
            - 3
            - Fn::Cidr:
              - !Ref cidrBlock
              - "4"
              - !Ref firstQuarteringCidrBits
          - "4"
          - !Ref secondQuarteringCidrBits
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet AZ B

  publicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::If:
          - vpcIsCloudFormationStack
          - Fn::ImportValue:
              !Sub "${vpcStackName}-vpc"
          - !Ref vpcId
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: ""
      CidrBlock: !Select
        - 2
        - Fn::Cidr:
          - !Select
            - 3
            - Fn::Cidr:
              - !Ref cidrBlock
              - "4"
              - !Ref firstQuarteringCidrBits
          - "4"
          - !Ref secondQuarteringCidrBits
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet AZ C

  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::If:
          - vpcIsCloudFormationStack
          - Fn::ImportValue:
              !Sub "${vpcStackName}-vpc"
          - !Ref vpcId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Route Table

  publicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref publicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Fn::If:
          - vpcIsCloudFormationStack
          - Fn::ImportValue:
              !Sub "${vpcStackName}-internet-gateway"
          - !Ref internetGatewayId

  publicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnetA

  publicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnetB

  publicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnetC

  natGatewayAElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: vpcGatewayAttachment
    Properties:
      Domain: vpc

  natGatewayBElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: vpcGatewayAttachment
    Properties:
      Domain: vpc

  natGatewayCElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: vpcGatewayAttachment
    Properties:
      Domain: vpc

  natGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt natGatewayAElasticIP.AllocationId
      SubnetId: !Ref publicSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} NAT Gateway AZ A

  natGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt natGatewayBElasticIP.AllocationId
      SubnetId: !Ref publicSubnetB
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} NAT Gateway AZ B

  natGatewayC:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt natGatewayCElasticIP.AllocationId
      SubnetId: !Ref publicSubnetC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} NAT Gateway AZ C

  privateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::If:
          - vpcIsCloudFormationStack
          - Fn::ImportValue:
              !Sub "${vpcStackName}-vpc"
          - !Ref vpcId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Route Table A

  privateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::If:
          - vpcIsCloudFormationStack
          - Fn::ImportValue:
              !Sub "${vpcStackName}-vpc"
          - !Ref vpcId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Route Table B

  privateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::If:
          - vpcIsCloudFormationStack
          - Fn::ImportValue:
              !Sub "${vpcStackName}-vpc"
          - !Ref vpcId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Route Table C

  privateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref privateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natGatewayA

  privateRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref privateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natGatewayB

  privateRouteC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref privateRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natGatewayC

  privateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateRouteTableA
      SubnetId: !Ref privateSubnetA

  privateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateRouteTableB
      SubnetId: !Ref privateSubnetB

  privateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateRouteTableC
      SubnetId: !Ref privateSubnetC

  bastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName} Bastion Security Group
      GroupDescription: !Sub ${AWS::StackName} Bastion Security Group
      VpcId:
        Fn::If:
          - vpcIsCloudFormationStack
          - Fn::ImportValue:
              !Sub "${vpcStackName}-vpc"
          - !Ref vpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Bastion Security Group

  bastionLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap
        - Regions
        - !Ref AWS::Region
        - AmazonLinux2Ami
      KeyName: !Ref keyName
      InstanceType: !Ref bastionInstanceType
      SecurityGroups:
        - !Ref bastionSecurityGroup
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash -x
           echo "${project.version} - ${timestamp}"
           yum update -y
           /opt/aws/bin/cfn-init -v --configsets setup --stack ${AWS::StackName} --resource bastionLaunchConfiguration --region ${AWS::Region}
           /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource bastionAutoScalingGroup --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - "ssh_keys"
            - "ntp"
        ssh_keys:
          files:
            /home/ec2-user/.ssh/additional_keys:
              source: !Ref bastionAuthorizedKeys
              owner: root
              group: root
              mode: 000644
          commands:
            register_additional_keys:
              command: "cat /home/ec2-user/.ssh/additional_keys >> /home/ec2-user/.ssh/authorized_keys"
        ntp:
          packages:
            yum:
              ntp: []
          services:
            sysvinit:
              ntpd:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                    - ntp

  bastionAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref bastionLaunchConfiguration
      MaxSize: 2
      MinSize: 0
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref publicSubnetA
        - !Ref publicSubnetB
        - !Ref publicSubnetC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Bastion
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        WaitOnResourceSignals: true

Outputs:
  vpc:
    Description: A reference to the used VPC.
    Value:
      Fn::If:
        - vpcIsCloudFormationStack
        - Fn::ImportValue:
            !Sub "${vpcStackName}-vpc"
        - !Ref vpcId
    Export:
      Name: !Sub ${AWS::StackName}-vpc

  publicSubnets:
    Description: A list of the public subnets.
    Value: !Join
      - ","
      - - !Ref publicSubnetA
        - !Ref publicSubnetB
        - !Ref publicSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-public-subnets

  privateSubnets:
    Description: A list of the private subnets.
    Value: !Join
      - ","
      - - !Ref privateSubnetA
        - !Ref privateSubnetB
        - !Ref privateSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-private-subnets

  bastionSecurityGroup:
    Description: The security group of the bastion, so that other security groups can allow SSH ingress from it.
    Value: !Ref bastionSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-bastion-security-group