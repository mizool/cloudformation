AWSTemplateFormatVersion: 2010-09-09
Description: This template deploys a network structure into a new CIDR range of an existing VPC. Its IP range is
  quartered into four parts. The first three parts form private subnets, the fourth is again quartered into three public
  subnets. Both the private and the public subnets are then spread across three Availability Zones. All the required
  infrastructure, like nat gateways, and default routes are included. Also, a bastion jump host is deployed in order to
  make any private machines reachable.

Parameters:
  vpcStackName:
    Description: The name of an existing VPC stack in which the CIDR range and subnets will be created.
    Type: String

  vpcId:
    Description: If the VPC in which the CIDR range will be created is not CloudFormation managed, enter its id here.
      Otherwise, leave it blank.
    Type: AWS::EC2::VPC::Id

  internetGatewayId:
    Description: If the VPC in which the CIDR range will be created is not CloudFormation managed, enter its internet
      gateway id here. Otherwise, leave it blank.
    Type: String

  cidrBlock:
    Description: The additional CIDR range to be added to the VPC. Note that the maximum size of a VPC CIDR range is
      16 bits.
    Type: String
    Default: 10.0.0.0/16

  firstQuarteringCidrBits:
    Description: The cidr bits for the four subnets on the first level ("public subnet A", "public subnet B",
      "public subnet C").
    Type: String
    Default: 14

  keyName:
    Description: The Key Manager key to be added to the list of allowed keys.
    Type: AWS::EC2::KeyPair::KeyName

Conditions:
  vpcIsCloudFormationStack:
    Fn::Equals:
      - !Ref vpcId
      - ""

Resources:
  publicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::If:
          - vpcIsCloudFormationStack
          - Fn::ImportValue:
              !Sub "${vpcStackName}-vpc"
          - !Ref vpcId
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: ""
      CidrBlock: !Select
        - 0
        - Fn::Cidr:
            - !Ref cidrBlock
            - "4"
            - !Ref firstQuarteringCidrBits
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet AZ A

  publicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::If:
          - vpcIsCloudFormationStack
          - Fn::ImportValue:
              !Sub "${vpcStackName}-vpc"
          - !Ref vpcId
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: ""
      CidrBlock: !Select
        - 1
        - Fn::Cidr:
            - !Ref cidrBlock
            - "4"
            - !Ref firstQuarteringCidrBits
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet AZ B

  publicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::If:
          - vpcIsCloudFormationStack
          - Fn::ImportValue:
              !Sub "${vpcStackName}-vpc"
          - !Ref vpcId
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: ""
      CidrBlock: !Select
        - 2
        - Fn::Cidr:
            - !Ref cidrBlock
            - "4"
            - !Ref firstQuarteringCidrBits
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet AZ C

  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::If:
          - vpcIsCloudFormationStack
          - Fn::ImportValue:
              !Sub "${vpcStackName}-vpc"
          - !Ref vpcId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Route Table

  publicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref publicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Fn::If:
          - vpcIsCloudFormationStack
          - Fn::ImportValue:
              !Sub "${vpcStackName}-internet-gateway"
          - !Ref internetGatewayId

  publicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnetA

  publicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnetB

  publicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnetC

Outputs:
  vpc:
    Description: A reference to the used VPC.
    Value:
      Fn::If:
        - vpcIsCloudFormationStack
        - Fn::ImportValue:
            !Sub "${vpcStackName}-vpc"
        - !Ref vpcId
    Export:
      Name: !Sub ${AWS::StackName}-vpc

  publicSubnets:
    Description: A list of the public subnets.
    Value: !Join
      - ","
      - - !Ref publicSubnetA
        - !Ref publicSubnetB
        - !Ref publicSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-public-subnets
