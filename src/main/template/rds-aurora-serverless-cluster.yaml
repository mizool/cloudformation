AWSTemplateFormatVersion: 2010-09-09
Description: Deploys a serveless database cluster in RDS.

Parameters:
  networkStackName:
    Description: The name of an existing network stack in which the database will be deployed.
    Type: String
    MinLength: 1

  masterUsername:
    Description: The user name for the admin account.
    Type: String
    Default: dbadmin
    MinLength: 1

  masterUserPassword:
    Description: The password for the admin account.
    Type: String
    MinLength: 8
    NoEcho: true

  engine:
    Description: The database engine being used, mysql or postgres.
    Type: String
    MinLength: 1
    Default: mysql
    AllowedValues:
      - mysql
      - postgres

  reachability:
    Description: Whether the database should be publicly reachable or not.
    Type: String
    MinLength: 1
    Default: private
    AllowedValues:
      - public
      - private

  defaultSchemaName:
    Description: The name of a default database schema, if one should be created.
    Type: String

Conditions:
  isPublic: !Equals [ !Ref reachability, public ]

  isMySql: !Equals [ !Ref engine, mysql ]

  createPublicMySQLIngress:
    Fn::And:
      - !Equals [ !Ref engine, mysql ]
      - !Equals [ !Ref reachability, public ]

  createPrivateMySQLIngress:
    Fn::And:
      - !Equals [ !Ref engine, mysql ]
      - !Equals [ !Ref reachability, private ]

  createPublicPostgresIngress:
    Fn::And:
      - !Equals [ !Ref engine, postgres ]
      - !Equals [ !Ref reachability, public ]

  createPrivatePostgresIngress:
    Fn::And:
      - !Equals [ !Ref engine, postgres ]
      - !Equals [ !Ref reachability, private ]

Resources:
  securityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName} Security Group
      GroupDescription: !Sub ${AWS::StackName} Security Group
      VpcId:
        Fn::ImportValue:
          !Sub "${networkStackName}-vpc"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Security Group

  public3306Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: createPublicMySQLIngress
    Properties:
      GroupId: !Ref securityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      CidrIp: 0.0.0.0/0

  private3306Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: createPrivateMySQLIngress
    Properties:
      GroupId: !Ref securityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId:
        Fn::ImportValue:
          !Sub "${networkStackName}-bastion-security-group"

  public5432Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: createPublicPostgresIngress
    Properties:
      GroupId: !Ref securityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      CidrIp: 0.0.0.0/0

  private5432Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: createPrivatePostgresIngress
    Properties:
      GroupId: !Ref securityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId:
        Fn::ImportValue:
          !Sub "${networkStackName}-bastion-security-group"

  subnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub ${AWS::StackName}-database-subnet-group
      SubnetIds:
        - Fn::Select:
          - 0
          - Fn::Split:
            - ","
            - Fn::ImportValue:
                Fn::If:
                  - isPublic
                  - !Sub "${networkStackName}-public-subnets"
                  - !Sub "${networkStackName}-private-subnets"
        - Fn::Select:
          - 1
          - Fn::Split:
            - ","
            - Fn::ImportValue:
                Fn::If:
                  - isPublic
                  - !Sub "${networkStackName}-public-subnets"
                  - !Sub "${networkStackName}-private-subnets"
        - Fn::Select:
          - 2
          - Fn::Split:
            - ","
            - Fn::ImportValue:
                Fn::If:
                  - isPublic
                  - !Sub "${networkStackName}-public-subnets"
                  - !Sub "${networkStackName}-private-subnets"

  dbCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DatabaseName: !Ref defaultSchemaName
      DBClusterIdentifier: !Sub ${AWS::StackName}-database
      Engine:
        Fn::If:
          - isMySql
          - aurora-mysql
          - aurora-postgresql
      EngineVersion:
        Fn::If:
          - isMySql
          - "8.0.mysql_aurora.3.02.3"
          - "14.7"
      EngineMode: serverless
      MasterUsername: !Ref masterUsername
      MasterUserPassword: !Ref masterUserPassword
      DBSubnetGroupName: !Ref subnetGroup
      VpcSecurityGroupIds:
        - !Ref securityGroup
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: 2
        SecondsUntilAutoPause: 3600

Outputs:
  JdbcUrl:
    Description: The JDBC url to connect to the service database.
    Value:
      Fn::Join:
        - ""
        - - "jdbc:"
          - !Ref engine
          - "://"
          - !GetAtt [ dbCluster, Endpoint.Address ]
          - ":"
          - !GetAtt [ dbCluster, Endpoint.Port ]
          - "/"
          - !Ref defaultSchemaName
          - "?user="
          - !Ref masterUsername
          - "&password="
          - !Ref masterUserPassword
    Export:
      Name: !Sub ${AWS::StackName}-jdbc-url

  SecurityGroup:
    Description: The database security group, so that other security groups can allow ingress to it.
    Value: !Ref securityGroup
    Export:
      Name: !Sub ${AWS::StackName}-security-group

  Address:
    Description: The address of the database.
    Value: !GetAtt [ dbCluster, Endpoint.Address ]
    Export:
      Name: !Sub ${AWS::StackName}-address

  Port:
    Description: The port of the database.
    Value: !GetAtt [ dbCluster, Endpoint.Port ]
    Export:
      Name: !Sub ${AWS::StackName}-port

  MasterUsername:
    Description: The user name of the master user.
    Value: !Ref masterUsername
    Export:
      Name: !Sub ${AWS::StackName}-master-username

  MasterUserPassword:
    Description: The password of the master user.
    Value: !Ref masterUserPassword
    Export:
      Name: !Sub ${AWS::StackName}-master-user-password

  Engine:
    Description: The database engine used.
    Value: !Ref engine
    Export:
      Name: !Sub ${AWS::StackName}-engine

  DefaultSchemaName:
    Description: The default schema name, if given.
    Value: !Ref defaultSchemaName
    Export:
      Name: !Sub ${AWS::StackName}-default-schema-name